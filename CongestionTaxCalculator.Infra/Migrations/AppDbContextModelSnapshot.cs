// <auto-generated />
using System;
using CongestionTaxCalculator.Infra.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CongestionTaxCalculator.Infra.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CongestionTaxCalculator.Domain.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DayMaxTax")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("CongestionTaxCalculator.Domain.DayPeriodTax", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("TaxFee")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("DayPeriodTax");
                });

            modelBuilder.Entity("CongestionTaxCalculator.Domain.FreeChargeDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FreeOfChargeDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("FreeChargeDate");
                });

            modelBuilder.Entity("CongestionTaxCalculator.Domain.FreeChargeDayOfWeek", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("FreeChargeDayOfWeek");
                });

            modelBuilder.Entity("CongestionTaxCalculator.Domain.FreeChargeMonth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("FreeChargeMonth");
                });

            modelBuilder.Entity("CongestionTaxCalculator.Domain.DayPeriodTax", b =>
                {
                    b.HasOne("CongestionTaxCalculator.Domain.City", null)
                        .WithMany("DayPeriodTax")
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("CongestionTaxCalculator.Domain.FreeChargeDate", b =>
                {
                    b.HasOne("CongestionTaxCalculator.Domain.City", null)
                        .WithMany("FreeChargeDates")
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("CongestionTaxCalculator.Domain.FreeChargeDayOfWeek", b =>
                {
                    b.HasOne("CongestionTaxCalculator.Domain.City", null)
                        .WithMany("FreeChargeDayOfWeeks")
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("CongestionTaxCalculator.Domain.FreeChargeMonth", b =>
                {
                    b.HasOne("CongestionTaxCalculator.Domain.City", null)
                        .WithMany("FreeChargeMonths")
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("CongestionTaxCalculator.Domain.City", b =>
                {
                    b.Navigation("DayPeriodTax");

                    b.Navigation("FreeChargeDates");

                    b.Navigation("FreeChargeDayOfWeeks");

                    b.Navigation("FreeChargeMonths");
                });
#pragma warning restore 612, 618
        }
    }
}
